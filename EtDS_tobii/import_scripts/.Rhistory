getwd()
print("/'import_header.csv/' file is required for processing raw data.")
cat("/'import_header.csv/' file is required for processing raw data.")
cat("'import_header.csv' file is required for processing raw data.")
utils::getSrcDirectory
df_test <- data.frame(matrix(2,2))
View(df_test)
View(df_test)
df_test <- data.frame(matrix(ncol=2,nrow=2))
View(df_test)
View(df_test)
rm(list=ls())
print(utils::getSrcDirectory)
print(utils::getSrcDirectory())
print(dirname(sys.frame(1)$ofile))
rm(list=ls())
print(dirname(sys.frame(1)$ofile))
dir_current <- dirname(sys.frame(1)$ofile)
print()
dir_current <- dirname(sys.frame(1)$ofile)
rm(list=ls())
dir_current <- dirname(sys.frame(1)$ofile)
print()
source("../../")
rm(list=ls())
dir_current <- dirname(sys.frame(1)$ofile)
import
getwd(0)
getwd()
source("../../../peekds/*")
setwd("C:/Dropbox/_codes/peekbank-hack/EtDS_tobii/import_scripts")
source("../../../peekds/*")
source("../../../peekds/read.R")
list.files("../")
list.files("../..")
list.files("../../..")
list.files("../../../peekds")
source("../../../peekds/R/read.R")
list.files("../../../peekds/R")
source("../../../peekds/R/readers.R")
dir_current <- dirname(sys.frame(1)$ofile)
Rscript import.R
dir_current <- dirname(sys.frame(1)$ofile)
rm(list=ls())
source("../../../peekds/R/readers.R")
dir_raw <- "../raw_data/tobii-sample.tsv"
dir_procd <- "../processed_data/"
process_tobii(dir_raw = dir_raw, dir_procd = dir_procd)
file.exists(dir_procd)
getwd()
dir_procd <- "../processed_data/"
process_tobii(dir_raw = dir_raw, dir_procd = dir_procd)
file.exists(dir_procd)
getwd()
file.exists("..")
file.exists("../processed_data")
dir_procd
file.exists("../processed_data/")
file.exists("../processed_data")
process_tobii(dir_raw = dir_raw, dir_procd = dir_procd)
dir_raw <- "../raw_data/tobii-sample.tsv"
dir_procd <- "../processed_data"
process_tobii(dir_raw = dir_raw, dir_procd = dir_procd)
table_list <<- c("xy_data", "aoi_data", "participants", "trials", "dataset", "aoi_coordinates")
df_xy_data <- map_columns(raw_data = raw_data, raw_format = "tobii", table_type = "trials")
raw_data <- read.table(file = dir_raw, sep = '\t', header = TRUE)
df_xy_data <- map_columns(raw_data = raw_data, raw_format = "tobii", table_type = "trials")
df_xy_data <- map_columns(raw_data = raw_data, raw_format = "tobii", table_type = "trials")
df_xy_data <- map_columns(raw_data = raw_data, raw_format = "tobii", table_type = "trials")
df_xy_data <- map_columns(raw_data = raw_data, raw_format = "tobii", table_type = "trials")
df_xy_data <- map_columns(raw_data = raw_data, raw_format = "tobii", table_type = "trials")
map_columns <- function(raw_data, raw_format, table_type) {
# dir_mapping won't be an input parameter, instead the function by default
# assumes that this file should be in import_scripts/import_header.csv
file_header <- "import_header.csv"
if (!file.exists(file_header)) {
stop("'import_header.csv' file is required for processing raw data.\n")
}
## STEP 0. read in raw datafiles and the column names
df_header <- read.csv(file=file_header, header=TRUE, sep=",")
df_raw <- raw_data
df_map <- df_header[
which((df_header$format == raw_format) & (df_header$table == table_type)), ]
print("?")
print((dim(df_map) == NULL))
print("?")
if (dim(df_map) == NULL) {
stop(cat("User needs to provide mapping columns between raw data and table",
table_type, "in 'import_scripts/import_header.csv'.\n"))
}
colnames_raw <- colnames(df_raw)
colnames_fetch <- as.vector(df_map[, "raw_column"])
colnames_map <- as.vector(df_map[, "mapped_column"])
## create new data table with NA values
df_table <- data.frame(
matrix(
ncol = length(colnames_map), nrow = nrow(df_raw)))
colnames(df_table) <- colnames_map
## search through raw data table and find desired columns,
## if they did not exist, then just the column will be left with NA values
for (i in 1:length(colnames_fetch)) {
if (colnames_fetch[i] %in% colnames_raw) {
df_table[i] = df_raw[colnames_fetch[i]]
} else {
cat(colnames_fetch[i], "does not exist in the raw", raw_format, "data file\n")
}
}
return(df_table)
}
df_xy_data <- map_columns(raw_data = raw_data, raw_format = "tobii", table_type = "trials")
map_columns <- function(raw_data, raw_format, table_type) {
# dir_mapping won't be an input parameter, instead the function by default
# assumes that this file should be in import_scripts/import_header.csv
file_header <- "import_header.csv"
if (!file.exists(file_header)) {
stop("'import_header.csv' file is required for processing raw data.\n")
}
## STEP 0. read in raw datafiles and the column names
df_header <- read.csv(file=file_header, header=TRUE, sep=",")
df_raw <- raw_data
df_map <- df_header[
which((df_header$format == raw_format) & (df_header$table == table_type)), ]
if (nrow(df_map) == 0) {
stop(cat("User needs to provide mapping columns between raw data and table",
table_type, "in 'import_scripts/import_header.csv'.\n"))
}
colnames_raw <- colnames(df_raw)
colnames_fetch <- as.vector(df_map[, "raw_column"])
colnames_map <- as.vector(df_map[, "mapped_column"])
## create new data table with NA values
df_table <- data.frame(
matrix(
ncol = length(colnames_map), nrow = nrow(df_raw)))
colnames(df_table) <- colnames_map
## search through raw data table and find desired columns,
## if they did not exist, then just the column will be left with NA values
for (i in 1:length(colnames_fetch)) {
if (colnames_fetch[i] %in% colnames_raw) {
df_table[i] = df_raw[colnames_fetch[i]]
} else {
cat(colnames_fetch[i], "does not exist in the raw", raw_format, "data file\n")
}
}
return(df_table)
}
df_xy_data <- map_columns(raw_data = raw_data, raw_format = "tobii", table_type = "trials")
map_columns <- function(raw_data, raw_format, table_type) {
# dir_mapping won't be an input parameter, instead the function by default
# assumes that this file should be in import_scripts/import_header.csv
file_header <- "import_header.csv"
if (!file.exists(file_header)) {
stop("'import_header.csv' file is required for processing raw data.\n")
}
## STEP 0. read in raw datafiles and the column names
df_header <- read.csv(file=file_header, header=TRUE, sep=",")
df_raw <- raw_data
df_map <- df_header[
which((df_header$format == raw_format) & (df_header$table == table_type)), ]
if (nrow(df_map) == 0) {
warning(cat("User did not provide mapping columns between raw data and table",
table_type, "in 'import_scripts/import_header.csv'. Thus",
table_type, "table is not processed.\n"))
return(NULL)
}
colnames_raw <- colnames(df_raw)
colnames_fetch <- as.vector(df_map[, "raw_column"])
colnames_map <- as.vector(df_map[, "mapped_column"])
## create new data table with NA values
df_table <- data.frame(
matrix(
ncol = length(colnames_map), nrow = nrow(df_raw)))
colnames(df_table) <- colnames_map
## search through raw data table and find desired columns,
## if they did not exist, then just the column will be left with NA values
for (i in 1:length(colnames_fetch)) {
if (colnames_fetch[i] %in% colnames_raw) {
df_table[i] = df_raw[colnames_fetch[i]]
} else {
cat(colnames_fetch[i], "does not exist in the raw", raw_format, "data file\n")
}
}
return(df_table)
}
df_xy_data <- map_columns(raw_data = raw_data, raw_format = "tobii", table_type = "trials")
return(NULL)
map_columns <- function(raw_data, raw_format, table_type) {
# dir_mapping won't be an input parameter, instead the function by default
# assumes that this file should be in import_scripts/import_header.csv
file_header <- "import_header.csv"
if (!file.exists(file_header)) {
stop("'import_header.csv' file is required for processing raw data.\n")
}
## STEP 0. read in raw datafiles and the column names
df_header <- read.csv(file=file_header, header=TRUE, sep=",")
df_raw <- raw_data
df_map <- df_header[
which((df_header$format == raw_format) & (df_header$table == table_type)), ]
if (nrow(df_map) == 0) {
warning("User did not provide mapping columns between raw data and table",
table_type, "in 'import_scripts/import_header.csv'. Thus",
table_type, "table is not processed.\n")
return(NULL)
}
colnames_raw <- colnames(df_raw)
colnames_fetch <- as.vector(df_map[, "raw_column"])
colnames_map <- as.vector(df_map[, "mapped_column"])
## create new data table with NA values
df_table <- data.frame(
matrix(
ncol = length(colnames_map), nrow = nrow(df_raw)))
colnames(df_table) <- colnames_map
## search through raw data table and find desired columns,
## if they did not exist, then just the column will be left with NA values
for (i in 1:length(colnames_fetch)) {
if (colnames_fetch[i] %in% colnames_raw) {
df_table[i] = df_raw[colnames_fetch[i]]
} else {
cat(colnames_fetch[i], "does not exist in the raw", raw_format, "data file\n")
}
}
return(df_table)
}
df_xy_data <- map_columns(raw_data = raw_data, raw_format = "tobii", table_type = "trials")
map_columns <- function(raw_data, raw_format, table_type) {
# dir_mapping won't be an input parameter, instead the function by default
# assumes that this file should be in import_scripts/import_header.csv
file_header <- "import_header.csv"
if (!file.exists(file_header)) {
stop("'import_header.csv' file is required for processing raw data.\n")
}
## STEP 0. read in raw datafiles and the column names
df_header <- read.csv(file=file_header, header=TRUE, sep=",")
df_raw <- raw_data
df_map <- df_header[
which((df_header$format == raw_format) & (df_header$table == table_type)), ]
if (nrow(df_map) == 0) {
warning("User did not provide mapping columns between raw data and table ",
table_type, " in 'import_scripts/import_header.csv'. Thus ",
table_type, " table is not processed.\n")
return(NULL)
}
colnames_raw <- colnames(df_raw)
colnames_fetch <- as.vector(df_map[, "raw_column"])
colnames_map <- as.vector(df_map[, "mapped_column"])
## create new data table with NA values
df_table <- data.frame(
matrix(
ncol = length(colnames_map), nrow = nrow(df_raw)))
colnames(df_table) <- colnames_map
## search through raw data table and find desired columns,
## if they did not exist, then just the column will be left with NA values
for (i in 1:length(colnames_fetch)) {
if (colnames_fetch[i] %in% colnames_raw) {
df_table[i] = df_raw[colnames_fetch[i]]
} else {
cat(colnames_fetch[i], "does not exist in the raw", raw_format, "data file\n")
}
}
return(df_table)
}
df_xy_data <- map_columns(raw_data = raw_data, raw_format = "tobii", table_type = "trials")
